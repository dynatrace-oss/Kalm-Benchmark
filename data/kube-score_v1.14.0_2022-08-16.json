[
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-001-1-default-memory-requests-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-001-1-default-memory-requests-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-001-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.memory",
          "description": "not setting default memory requests can lead to problems upon admission",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Memory request is not set",
              "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-001-1-default-memory-requests-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-002-1-default-memory-limits-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-002-1-default-memory-limits-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-002-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.memory",
          "description": "not setting memory limit can lead to the pod suffocating the node by using all available memory",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Memory limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-002-1-default-memory-limits-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-8-set-runasnonroot-correctly-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-8-set-runasnonroot-correctly-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-8"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "runAsNonRoot setting on container takes precedence",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-8-set-runasnonroot-correctly-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-001-2-no-memory-requests",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-001-2-no-memory-requests",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-001-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.memory",
          "description": "not setting memory requests can lead to problems upon admission",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Memory request is not set",
              "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-001-2-no-memory-requests.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-2-use-runasnonroot-flag-on-pod",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-2-use-runasnonroot-flag-on-pod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-2"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Using runAsNonRoot is a viable alternative to `runAsUser>1000`",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-2-use-runasnonroot-flag-on-pod.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-031-1-allowed-privilege-escalation-by-default",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-031-1-allowed-privilege-escalation-by-default",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-031-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.allowPrivilegeEscalation",
          "description": "Avoid using the privileged flag, and if your container does need additional capabilities, add only the ones you need through the capabilities settings. ",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-031-1-allowed-privilege-escalation-by-default.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-22-using-insecure-capability-sys-ptrace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-22-using-insecure-capability-sys-ptrace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-22"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-22-using-insecure-capability-sys-ptrace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-032-1-non-privileged-container-by-default",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-032-1-non-privileged-container-by-default",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-032-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.privileged",
          "description": "Changing the privileged flag is optional as it defaults to False",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-032-1-non-privileged-container-by-default.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1//kalm-benchmark",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": { "app.kubernetes.io/part-of": "kalm-benchmark" }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The NetworkPolicys selector doesn't match any pods",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/_kalm-benchmark-c882ce07.yaml",
      "file_row": 42
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-009-1-no-resource-quota-applied-to-namespace/res-009-1-no-resource-quota-applied-to-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-009-1-no-resource-quota-applied-to-namespace",
        "namespace": "res-009-1-no-resource-quota-applied-to-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-009-1"
        },
        "annotations": {
          "check_path": "ResourceQuota.metadata.namespace|.metadata.namespace",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-009-1-no-resource-quota-applied-to-namespace.yaml",
      "file_row": 40
    },
    {
      "object_name": "Deployment/apps/v1/res-009-1-no-resource-quota-applied-to-namespace/res-009-1-no-resource-quota-applied-to-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-009-1-no-resource-quota-applied-to-namespace",
        "namespace": "res-009-1-no-resource-quota-applied-to-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-009-1"
        },
        "annotations": {
          "check_path": "ResourceQuota.metadata.namespace|.metadata.namespace",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-009-1-no-resource-quota-applied-to-namespace.yaml",
      "file_row": 67
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-4-automount-pod-default-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-4-automount-pod-default-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-4"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "enabling automounting at Pod level takes precedence over SA",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-4-automount-pod-default-sa.yaml",
      "file_row": 10
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-9-no-automount-pod-and-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-9-no-automount-pod-and-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-9"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "disabling automounting at Pod level takes precedence over SA",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-9-no-automount-pod-and-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/default/ns-001-use-default-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "ns-001-use-default-namespace",
        "namespace": "default",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NS-001"
        },
        "annotations": {
          "check_path": ".metadata.namespace",
          "description": "not setting memory limit can lead to the pod suffocating the node by using all available memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/ns-001-use-default-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-033-1-root-fs-is-writeable-by-default",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-033-1-root-fs-is-writeable-by-default",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-033-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.readOnlyRootFilesystem",
          "description": "Using an immutable root filesystem prevents against attackers from compromising the machine through permanent local changes.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The pod has a container with a writable root filesystem",
              "description": "Set securityContext.readOnlyRootFilesystem to true"
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-033-1-root-fs-is-writeable-by-default.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-034-3-using-dangerous-capability-net-admin",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-034-3-using-dangerous-capability-net-admin",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-034-3"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Dangerous capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-034-3-using-dangerous-capability-net-admin.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-019-1-default-to-root-group",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-019-1-default-to-root-group",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-019-1"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsGroup|.spec.containers[].securityContext.runAsGroup",
          "description": "by default GID 0 is used, which has elevated privileges",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container running with a low group ID",
              "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-019-1-default-to-root-group.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-0-usage-of-bin-bash-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-0-usage-of-bin-bash-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-0"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-0-usage-of-bin-bash-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-13-using-insecure-capability-perfmon",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-13-using-insecure-capability-perfmon",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-13"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-13-using-insecure-capability-perfmon.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-010-2-has-hostnetwork-set",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-010-2-has-hostnetwork-set",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-010-2"
        },
        "annotations": {
          "check_path": ".spec.hostNetwork",
          "description": "Containers should be isolated from the host machine as much as possible.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-010-2-has-hostnetwork-set.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-7-usage-of-bin-busybox-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-7-usage-of-bin-busybox-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-7"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-7-usage-of-bin-busybox-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-021-0-using-sysctl-kernel.shm-rmid-forced",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-021-0-using-sysctl-kernel.shm-rmid-forced",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-021-0"
        },
        "annotations": {
          "check_path": ".spec.securityContext.sysctls[]",
          "description": "Giving dangerous capabilities to a container increases the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-021-0-using-sysctl-kernel.shm-rmid-forced-c808ea91.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-4-using-insecure-capability-dac-overrides",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-4-using-insecure-capability-dac-overrides",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-4"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-4-using-insecure-capability-dac-overrides.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-018-5-use-uid-set-in-container-takes-precedence",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-018-5-use-uid-set-in-container-takes-precedence",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-018-5"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsUser|.spec.securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot",
          "description": "in case of conflicting settings, the value on the container takes precedence",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-018-5-use-uid-set-in-container-takes-precedence.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-002-2-no-sa-specified",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-002-2-no-sa-specified",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-002-2"
        },
        "annotations": {
          "check_path": ".spec.serviceAccountName",
          "description": "if no service account is specified it defaults to the `default` ServiceAccount, which should be avoided. Create a dedicated ServiceAccount without any permissions instead.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-002-2-no-sa-specified.yaml",
      "file_row": 1
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-010-1-use-no-hostnetwork",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-010-1-use-no-hostnetwork",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-010-1"
        },
        "annotations": {
          "check_path": ".spec.hostNetwork",
          "description": "The hostNetwork defaults to `false` and thus should be okay",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-010-1-use-no-hostnetwork.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-2-default-pod-automount-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-2-default-pod-automount-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-2"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "allowing automounting on SA leads to all pods without explicit setting to mount it automatically",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-2-default-pod-automount-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-21-using-insecure-capability-sys-rawio",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-21-using-insecure-capability-sys-rawio",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-21"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-21-using-insecure-capability-sys-rawio.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-004-3-only-nodeselector-is-enough",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-004-3-only-nodeselector-is-enough",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-004-3"
        },
        "annotations": {
          "check_path": ".spec.nodeSelector|.spec.affinity.nodeAffinity",
          "description": "Pods with high risk workloads can be assigned to specific node to separate them from other workloads",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-004-3-only-nodeselector-is-enough.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-032-2-privileged-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-032-2-privileged-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-032-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.privileged|.spec.containers[].securityContext.allowPrivilegeEscalation",
          "description": "Privileged containers can do almost every action that can be performed directly on the host.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is privileged",
              "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-032-2-privileged-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-044-2-mounting-docker-directory",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-044-2-mounting-docker-directory",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-044-2"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "mounting Docker socket (Unix socket) enables container to access Docker internals, retrieve sensitive information and execute Docker commands.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-044-2-mounting-docker-directory.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-001-2-no-proper-imagepullpolicy-set",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-001-2-no-proper-imagepullpolicy-set",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-001-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].imagePullPolicy",
          "description": "Kubernetes may run older version of the container images without user knowing about this",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "ImagePullPolicy is not set to Always",
              "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-001-2-no-proper-imagepullpolicy-set.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-042-3-volume-with-writeable-hostpath-by-default",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-042-3-volume-with-writeable-hostpath-by-default",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-042-3"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "Attackers can use a writable hostpath to gain persistence on underlying host system",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-042-3-volume-with-writeable-hostpath-by-default.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-005-1-default-ephemeral-storage-requests-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-005-1-default-ephemeral-storage-requests-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-005-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.ephemeral-storage",
          "description": "not setting ephemeral storarge limit can suffocate the node by using all available storage",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Ephemeral Storage request is not set",
              "description": "Resource requests are recommended to make sure the application can start and run without crashing. Set resource.requests.ephemeral-storage"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-005-1-default-ephemeral-storage-requests-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-002-3-no-explicit-tag",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-002-3-no-explicit-tag",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-002-3"
        },
        "annotations": {
          "check_path": ".spec.containers[].image",
          "description": "Kubernetes may run older version of the container images without user knowing about this",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Image with latest tag",
              "description": "Using a fixed tag is recommended to avoid accidental upgrades"
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-002-3-no-explicit-tag.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-007-0-no-limitrange-object-for-namespace/res-007-0-no-limitrange-object-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-007-0-no-limitrange-object-for-namespace",
        "namespace": "res-007-0-no-limitrange-object-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-0"
        },
        "annotations": {
          "check_path": "LimitRange.metadata.namespace|.metadata.namespace",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-0-no-limitrange-object-for-namespace.yaml",
      "file_row": 30
    },
    {
      "object_name": "Deployment/apps/v1/res-007-0-no-limitrange-object-for-namespace/res-007-0-no-limitrange-object-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-007-0-no-limitrange-object-for-namespace",
        "namespace": "res-007-0-no-limitrange-object-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-0"
        },
        "annotations": {
          "check_path": "LimitRange.metadata.namespace|.metadata.namespace",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-0-no-limitrange-object-for-namespace.yaml",
      "file_row": 57
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-042-1-volume-with-read-only-hostpath",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-042-1-volume-with-read-only-hostpath",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-042-1"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "using hostPath is not ideal but can be tolerated when it's read-only",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-042-1-volume-with-read-only-hostpath.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-5-using-insecure-capability-fowner",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-5-using-insecure-capability-fowner",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-5"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-5-using-insecure-capability-fowner.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-003-2-no-cpu-requests",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-003-2-no-cpu-requests",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-003-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.cpu",
          "description": "not setting CPU requests can lead to problems upon admission",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "CPU request is not set",
              "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-003-2-no-cpu-requests.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-002-2-no-memory-limits",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-002-2-no-memory-limits",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-002-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.memory",
          "description": "not setting memory limit can lead to the pod suffocating the node by using all available memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Memory limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-002-2-no-memory-limits.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-003-1-default-cpu-requests-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-003-1-default-cpu-requests-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-003-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.cpu",
          "description": "not setting default CPU requests can lead to problems upon admission",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "CPU request is not set",
              "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-003-1-default-cpu-requests-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-044-1-mounting-docker-socket",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-044-1-mounting-docker-socket",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-044-1"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "Mounting Docker socket (Unix socket) enables container to access Docker internals, retrieve sensitive information and execute Docker commands.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-044-1-mounting-docker-socket.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-6-automount-pod-no-automount-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-6-automount-pod-no-automount-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-6"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "enabling automounting at Pod level takes precedence over SA",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-6-automount-pod-no-automount-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-008-1-use-no-hostpid",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-008-1-use-no-hostpid",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-008-1"
        },
        "annotations": {
          "check_path": ".spec.hostPID",
          "description": "The hostPID defaults to `false` and thus should be okay",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-008-1-use-no-hostpid.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-018-3-use-uid-between-1k-10k-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-018-3-use-uid-between-1k-10k-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-018-3"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsUser|.spec.securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot",
          "description": "An UID above 1000 is enough to avoid running as a system user",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-018-3-use-uid-between-1k-10k-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-021-1-using-sysctl-net.ipv4.tcp-keepalive-time",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-021-1-using-sysctl-net.ipv4.tcp-keepalive-time",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-021-1"
        },
        "annotations": {
          "check_path": ".spec.securityContext.sysctls[]",
          "description": "Giving dangerous capabilities to a container increases the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-021-1-using-sysctl-net.ipv4.tcp-keepalive-time-c86452e6.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-005-2-no-ephemeral-storage-requests",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-005-2-no-ephemeral-storage-requests",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-005-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.requests.ephemeral-storage",
          "description": "not setting ephemeral storage limit can suffocate the node by using all available CPU",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Ephemeral Storage request is not set",
              "description": "Resource requests are recommended to make sure the application can start and run without crashing. Set resource.requests.ephemeral-storage"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-005-2-no-ephemeral-storage-requests.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-018-1-default-to-root-user",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-018-1-default-to-root-user",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-018-1"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsUser|.spec.securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot",
          "description": "Having neither runAsNonRoot nor `runAsUser>1000` means a user has elevated privileges",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-018-1-default-to-root-user.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-001-1-imagepullpolicy-defaults-to-always",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-001-1-imagepullpolicy-defaults-to-always",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-001-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].imagePullPolicy",
          "description": "Kubernetes may run older version of the container images without user knowing about this",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "ImagePullPolicy is not set to Always",
              "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-001-1-imagepullpolicy-defaults-to-always.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-009-1-use-no-hostipc",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-009-1-use-no-hostipc",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-009-1"
        },
        "annotations": {
          "check_path": ".spec.hostIPC",
          "description": "The hostIPC defaults to `false` and thus should be okay",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-009-1-use-no-hostipc.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/res-008-2-no-default-memory-limits-for-namespace/res-008-2-no-default-memory-limits-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-008-2-no-default-memory-limits-for-namespace",
        "namespace": "res-008-2-no-default-memory-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-2"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.default.memory|.spec.limits.default.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-2-no-default-memory-limits-for-namespace.yaml",
      "file_row": 83
    },
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-008-2-no-default-memory-limits-for-namespace/res-008-2-no-default-memory-limits-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-008-2-no-default-memory-limits-for-namespace",
        "namespace": "res-008-2-no-default-memory-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-2"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.default.memory|.spec.limits.default.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-2-no-default-memory-limits-for-namespace.yaml",
      "file_row": 56
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-7-use-root-user-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-7-use-root-user-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-7"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Having neither runAsNonRoot nor `runAsUser>1000` means a user has elevated privileges",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-7-use-root-user-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/np-002-1-only-ingress-is-blocked/np-002-1-only-ingress-is-blocked",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "np-002-1-only-ingress-is-blocked",
        "namespace": "np-002-1-only-ingress-is-blocked",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-002-1"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.policyTypes[]|.spec.policyTypes[]",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-002-1-only-ingress-is-blocked.yaml",
      "file_row": 57
    },
    {
      "object_name": "Deployment/apps/v1/np-002-1-only-ingress-is-blocked/np-002-1-only-ingress-is-blocked",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "np-002-1-only-ingress-is-blocked",
        "namespace": "np-002-1-only-ingress-is-blocked",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-002-1"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.policyTypes[]|.spec.policyTypes[]",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching egress NetworkPolicy",
              "description": "Add a egress policy to the pods NetworkPolicy"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-002-1-only-ingress-is-blocked.yaml",
      "file_row": 83
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-6-usage-of-bin-csh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-6-usage-of-bin-csh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-6"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-6-usage-of-bin-csh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-019-5-use-gid-set-in-container-takes-precedence",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-019-5-use-gid-set-in-container-takes-precedence",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-019-5"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsGroup|.spec.containers[].securityContext.runAsGroup",
          "description": "in case of conflicting settings, the value on the container takes precedence",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container running with a low group ID",
              "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-019-5-use-gid-set-in-container-takes-precedence.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-025-sensitive-key-referenced-in-environment-variable",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-025-sensitive-key-referenced-in-environment-variable",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-025"
        },
        "annotations": {
          "check_path": ".spec.containers[].env[].name",
          "description": "Attackers can retrieve and use sensitive information provided via environment variables",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-025-sensitive-key-referenced-in-environment-variable.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-013-use-serviceaccount-field",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-013-use-serviceaccount-field",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-013"
        },
        "annotations": {
          "check_path": ".spec.serviceAccount",
          "description": "ServiceAccount field is deprecated, ServiceAccountName should be used instead",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-013-use-serviceaccount-field.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/np-002-2-only-egress-is-blocked/np-002-2-only-egress-is-blocked",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "np-002-2-only-egress-is-blocked",
        "namespace": "np-002-2-only-egress-is-blocked",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-002-2"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.policyTypes[]|.spec.policyTypes[]",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-002-2-only-egress-is-blocked.yaml",
      "file_row": 57
    },
    {
      "object_name": "Deployment/apps/v1/np-002-2-only-egress-is-blocked/np-002-2-only-egress-is-blocked",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "np-002-2-only-egress-is-blocked",
        "namespace": "np-002-2-only-egress-is-blocked",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-002-2"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.policyTypes[]|.spec.policyTypes[]",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 5,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching ingress NetworkPolicy",
              "description": "Add a ingress policy to the pods NetworkPolicy"
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-002-2-only-egress-is-blocked.yaml",
      "file_row": 83
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-009-2-has-hostipc-set",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-009-2-has-hostipc-set",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-009-2"
        },
        "annotations": {
          "check_path": ".spec.hostIPC",
          "description": "Containers should be isolated from the host machine as much as possible. `hostIPC` on pods may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-009-2-has-hostipc-set.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
        "namespace": "res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-009-2"
        },
        "annotations": {
          "check_path": "ResourceQuota.spec.hard.cpu|ResourceQuota.spec.hard.memory|ResourceQuota.spec.hard.requests.cpu|ResourceQuota.spec.hard.requests.memory|ResourceQuota.spec.hard.pods|.spec.hard.cpu|.spec.hard.memory|.spec.hard.requests.cpu|.spec.hard.requests.memory|.spec.hard.pods",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace.yaml",
      "file_row": 81
    },
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
        "namespace": "res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-009-2"
        },
        "annotations": {
          "check_path": "ResourceQuota.spec.hard.cpu|ResourceQuota.spec.hard.memory|ResourceQuota.spec.hard.requests.cpu|ResourceQuota.spec.hard.requests.memory|ResourceQuota.spec.hard.pods|.spec.hard.cpu|.spec.hard.memory|.spec.hard.requests.cpu|.spec.hard.requests.memory|.spec.hard.pods",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-009-2-no-hard-quotas-defined-in-resourcequota-for-namespace.yaml",
      "file_row": 54
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-006-1-default-ephemeral-storage-limits-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-006-1-default-ephemeral-storage-limits-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-006-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.ephemeral-storage",
          "description": "not setting ephemeral storarge limit can suffocate the node by using all available storage",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Ephemeral Storage limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-006-1-default-ephemeral-storage-limits-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-7-using-insecure-capability-kill",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-7-using-insecure-capability-kill",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-7"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-7-using-insecure-capability-kill.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-002-2-using-latest-image-tag",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-002-2-using-latest-image-tag",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-002-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].image",
          "description": "When using latest image tag the used image can change without the user knowing about this",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Image with latest tag",
              "description": "Using a fixed tag is recommended to avoid accidental upgrades"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-002-2-using-latest-image-tag.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/res-008-3-no-default-memory-limits-for-namespace/res-008-3-no-default-memory-limits-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-008-3-no-default-memory-limits-for-namespace",
        "namespace": "res-008-3-no-default-memory-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-3"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.min.memory|LimitRange.spec.limits.max.memory|.spec.limits.min.memory|.spec.limits.max.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-3-no-default-memory-limits-for-namespace.yaml",
      "file_row": 82
    },
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-008-3-no-default-memory-limits-for-namespace/res-008-3-no-default-memory-limits-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-008-3-no-default-memory-limits-for-namespace",
        "namespace": "res-008-3-no-default-memory-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-3"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.min.memory|LimitRange.spec.limits.max.memory|.spec.limits.min.memory|.spec.limits.max.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-3-no-default-memory-limits-for-namespace.yaml",
      "file_row": 55
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-2-usage-of-bin-ksh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-2-usage-of-bin-ksh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-2-usage-of-bin-ksh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-022-1-linux-is-not-hardened",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-022-1-linux-is-not-hardened",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-022-1"
        },
        "annotations": {
          "check_path": ".metadata.annotations|.metadata.annotations.container.apparmor.security.beta.kubernetes.io|.metadata.annotations[container.apparmor.security.beta.kubernetes.io]|.spec.securityContext.seccompProfile|.spec.securityContext.seLinuxOptions|.spec.containers[].securityContext.seccompProfile|.spec.containers[].securityContext.seLinuxOptions",
          "description": "Not hardening a linux system can increase the impact of a compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-022-1-linux-is-not-hardened.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-008-2-pod-has-hostpid-set",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-008-2-pod-has-hostpid-set",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-008-2"
        },
        "annotations": {
          "check_path": ".spec.hostPID",
          "description": "Containers should be isolated from the host machine as much as possible. `hostPID` pods may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-008-2-pod-has-hostpid-set.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-008-1-no-default-memory-request-for-namespace/res-008-1-no-default-memory-request-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-008-1-no-default-memory-request-for-namespace",
        "namespace": "res-008-1-no-default-memory-request-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-1"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.defaultRequest.memory|.spec.limits.defaultRequest.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-1-no-default-memory-request-for-namespace.yaml",
      "file_row": 56
    },
    {
      "object_name": "Deployment/apps/v1/res-008-1-no-default-memory-request-for-namespace/res-008-1-no-default-memory-request-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-008-1-no-default-memory-request-for-namespace",
        "namespace": "res-008-1-no-default-memory-request-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-008-1"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.defaultRequest.memory|.spec.limits.defaultRequest.memory",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-008-1-no-default-memory-request-for-namespace.yaml",
      "file_row": 83
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-012-use-hostaliases-to-modify-pods--etc-hosts",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-012-use-hostaliases-to-modify-pods--etc-hosts",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-012"
        },
        "annotations": {
          "check_path": ".spec.hostAliases",
          "description": "Managing /etc/hosts aliases can prevent Docker from modifying the file after a pod's containers have already been started",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-012-use-hostaliases-to-modify-pods--etc-hosts.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-9-set-runasnonroot-not-correctly-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-9-set-runasnonroot-not-correctly-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-9"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "runAsNonRoot setting on container takes precedence",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-9-set-runasnonroot-not-correctly-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-004-1-no-node-selection-specified",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-004-1-no-node-selection-specified",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-004-1"
        },
        "annotations": {
          "check_path": ".spec.nodeSelector|.spec.affinity.nodeAffinity",
          "description": "Pods with high risk workloads can be assigned to specific node to separate them from other workloads",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-004-1-no-node-selection-specified.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kube-system/ns-002-1-place-pod-in-kube-system",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "ns-002-1-place-pod-in-kube-system",
        "namespace": "kube-system",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NS-002-1"
        },
        "annotations": {
          "check_path": ".metadata.namespace",
          "description": "azure should not be used for custom workloads",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/ns-002-1-place-pod-in-kube-system.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-19-using-insecure-capability-sys-chroot",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-19-using-insecure-capability-sys-chroot",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-19"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-19-using-insecure-capability-sys-chroot.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-042-2-volume-with-writeable-hostpath",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-042-2-volume-with-writeable-hostpath",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-042-2"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "Attackers can use a writable hostpath to gain persistence on underlying host system",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-042-2-volume-with-writeable-hostpath.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-021-2-using-sysctl-net.ipv4.tcp-keepalive-probes",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-021-2-using-sysctl-net.ipv4.tcp-keepalive-probes",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-021-2"
        },
        "annotations": {
          "check_path": ".spec.securityContext.sysctls[]",
          "description": "Giving dangerous capabilities to a container increases the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-021-2-using-sysctl-net.ipv4.tcp-keepalive-probes-c83975aa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-007-2-no-default-cpu-limits-for-namespace/res-007-2-no-default-cpu-limits-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-007-2-no-default-cpu-limits-for-namespace",
        "namespace": "res-007-2-no-default-cpu-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-2"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.default.cpu|.spec.limits.default.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-2-no-default-cpu-limits-for-namespace.yaml",
      "file_row": 56
    },
    {
      "object_name": "Deployment/apps/v1/res-007-2-no-default-cpu-limits-for-namespace/res-007-2-no-default-cpu-limits-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-007-2-no-default-cpu-limits-for-namespace",
        "namespace": "res-007-2-no-default-cpu-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-2"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.default.cpu|.spec.limits.default.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-2-no-default-cpu-limits-for-namespace.yaml",
      "file_row": 83
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-18-using-insecure-capability-sys-boot",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-18-using-insecure-capability-sys-boot",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-18"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-18-using-insecure-capability-sys-boot.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-1-usage-of-sbin-sh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-1-usage-of-sbin-sh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-1-usage-of-sbin-sh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-016-no-podsecuritycontext-defined",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-016-no-podsecuritycontext-defined",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-016"
        },
        "annotations": {
          "check_path": ".spec.securityContext",
          "description": "not providing a podSecurityContext leads to the use of too permissive settings for the pod",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-016-no-podsecuritycontext-defined.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/res-004-1-default-cpu-limits-from-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-004-1-default-cpu-limits-from-namespace",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-004-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.cpu",
          "description": "not setting CPU limit can lead to the pod suffocating the node by using all available CPU",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "CPU limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-004-1-default-cpu-limits-from-namespace.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-3-runasnonroot-is-optional",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-3-runasnonroot-is-optional",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-3"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Using runAsNonRoot is a viable alternative to `runAsUser>1000`",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-3-runasnonroot-is-optional.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-20-using-insecure-capability-sys-module",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-20-using-insecure-capability-sys-module",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-20"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-20-using-insecure-capability-sys-module.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/np-003-network-policy-allows-access-to-cloud-metadata-api/np-003-network-policy-allows-access-to-cloud-metadata-api",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "np-003-network-policy-allows-access-to-cloud-metadata-api",
        "namespace": "np-003-network-policy-allows-access-to-cloud-metadata-api",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-003"
        },
        "annotations": {
          "check_path": "NetworkPolicy.egress[].to[].ipBlock|.egress[].to[].ipBlock",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-003-network-policy-allows-access-to-cloud-metadata-api.yaml",
      "file_row": 74
    },
    {
      "object_name": "Deployment/apps/v1/np-003-network-policy-allows-access-to-cloud-metadata-api/np-003-network-policy-allows-access-to-cloud-metadata-api",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "np-003-network-policy-allows-access-to-cloud-metadata-api",
        "namespace": "np-003-network-policy-allows-access-to-cloud-metadata-api",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-003"
        },
        "annotations": {
          "check_path": "NetworkPolicy.egress[].to[].ipBlock|.egress[].to[].ipBlock",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-003-network-policy-allows-access-to-cloud-metadata-api.yaml",
      "file_row": 104
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1//kalm-benchmark-unrestricted-ns",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": { "app.kubernetes.io/part-of": "kalm-benchmark" }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The NetworkPolicys selector doesn't match any pods",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/_kalm-benchmark-unrestricted-ns-c849031e.yaml",
      "file_row": 8
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-001-3-no-proper-imagepullpolicy-set",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-001-3-no-proper-imagepullpolicy-set",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-001-3"
        },
        "annotations": {
          "check_path": ".spec.containers[].imagePullPolicy",
          "description": "Kubernetes may run older version of the container images without user knowing about this",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "ImagePullPolicy is not set to Always",
              "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-001-3-no-proper-imagepullpolicy-set.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/sc-002-1-tag-instead-of-digest-is-fine",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "sc-002-1-tag-instead-of-digest-is-fine",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "SC-002-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].image",
          "description": "Specify an explicit tag or digest to have full control over the running container image",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/sc-002-1-tag-instead-of-digest-is-fine.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-3-default-pod-no-automount-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-3-default-pod-no-automount-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-3"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "disabling automounting at SA level will be the default for pods as well",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-3-default-pod-no-automount-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-1-default-pod-and-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-1-default-pod-and-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-1"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "relying on default on both pod and SA level leads to token being needlessly mounted",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-1-default-pod-and-sa.yaml",
      "file_row": 10
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-003-no-priorityclass",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-003-no-priorityclass",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-003"
        },
        "annotations": {
          "check_path": ".spec.priorityClassName",
          "description": "Pods with high risk workloads can be assigned higher PriorityClasses to ensure reliability",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-003-no-priorityclass.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-001-no-readinessprobe",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-001-no-readinessprobe",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-001"
        },
        "annotations": {
          "check_path": ".spec.containers[].readinessProbe",
          "description": "Configuring a readinessProbe is recommended as it's intended to ensure that workload is ready to process network traffic",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-001-no-readinessprobe.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-034-2-using-dangerous-capability-sys-admin",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-034-2-using-dangerous-capability-sys-admin",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-034-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Dangerous capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-034-2-using-dangerous-capability-sys-admin.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-1-default-to-root-user",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-1-default-to-root-user",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-1"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Having neither runAsNonRoot nor `runAsUser>1000` means a user has elevated privileges",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-1-default-to-root-user.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-004-2-no-cpu-limits",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-004-2-no-cpu-limits",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-004-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.cpu",
          "description": "not setting CPU limit can lead to the pod suffocating the node by using all available CPU",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "CPU limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-004-2-no-cpu-limits.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-018-2-use-uid-between-1k-10k-on-pod",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-018-2-use-uid-between-1k-10k-on-pod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-018-2"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsUser|.spec.securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot",
          "description": "An UID above 1000 is enough to avoid running as a system user",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-018-2-use-uid-between-1k-10k-on-pod.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark-unrestricted-ns/res-006-2-no-ephemeral-storage-limits",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-006-2-no-ephemeral-storage-limits",
        "namespace": "kalm-benchmark-unrestricted-ns",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-006-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].resources.limits.ephemeral-storage",
          "description": "not setting ephemeral storage limit can suffocate the node by using all available CPU",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "Ephemeral Storage limit is not set",
              "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-006-2-no-ephemeral-storage-limits.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/np-004-network-policy-allows-access-to-kubelet/np-004-network-policy-allows-access-to-kubelet",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "np-004-network-policy-allows-access-to-kubelet",
        "namespace": "np-004-network-policy-allows-access-to-kubelet",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-004"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.egress[].ports[].port|.spec.egress[].ports[].port",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-004-network-policy-allows-access-to-kubelet.yaml",
      "file_row": 74
    },
    {
      "object_name": "Deployment/apps/v1/np-004-network-policy-allows-access-to-kubelet/np-004-network-policy-allows-access-to-kubelet",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "np-004-network-policy-allows-access-to-kubelet",
        "namespace": "np-004-network-policy-allows-access-to-kubelet",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-004"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.egress[].ports[].port|.spec.egress[].ports[].port",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-004-network-policy-allows-access-to-kubelet.yaml",
      "file_row": 105
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-4-usage-of-bin-zsh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-4-usage-of-bin-zsh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-4"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-4-usage-of-bin-zsh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Pod/v1/kalm-benchmark/wl-001-naked-pod",
      "type_meta": { "kind": "Pod", "apiVersion": "v1" },
      "object_meta": {
        "name": "wl-001-naked-pod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "WL-001"
        },
        "annotations": {
          "check_path": ".metadata.ownerReferences|.kind",
          "container.apparmor.security.beta.kubernetes.io/app": "runtime/default",
          "container.seccomp.security.alpha.kubernetes.io/app": "runtime/default",
          "description": "Pods shouldn't be deployed without a resource managing it",
          "expected": "alert",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/wl-001-naked-pod.yaml",
      "file_row": 10
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-9-using-insecure-capability-mac-admin",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-9-using-insecure-capability-mac-admin",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-9"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-9-using-insecure-capability-mac-admin.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kube-public/ns-002-2-place-pod-in-kube-public",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "ns-002-2-place-pod-in-kube-public",
        "namespace": "kube-public",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NS-002-2"
        },
        "annotations": {
          "check_path": ".metadata.namespace",
          "description": "azure should not be used for custom workloads",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/ns-002-2-place-pod-in-kube-public.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-2-using-insecure-capability-bpf",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-2-using-insecure-capability-bpf",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-2-using-insecure-capability-bpf.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-10-using-insecure-capability-mknod",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-10-using-insecure-capability-mknod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-10"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-10-using-insecure-capability-mknod.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-3-usage-of-bin-tcsh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-3-usage-of-bin-tcsh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-3"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-3-usage-of-bin-tcsh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-011-uses-hostport",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-011-uses-hostport",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-011"
        },
        "annotations": {
          "check_path": ".spec.containers[].ports[].hostPort",
          "description": "When you bind a Pod to a hostPort, it limits the number of places the  Pod can be scheduled, because each <hostIP, hostPort, protocol> combination must be unique.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-011-uses-hostport.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-034-1-using-dangerous-capability-all",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-034-1-using-dangerous-capability-all",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-034-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Dangerous capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-034-1-using-dangerous-capability-all.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-002-no-livenessprobe",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-002-no-livenessprobe",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-002"
        },
        "annotations": {
          "check_path": ".spec.containers[].livenessProbe",
          "description": "Configuring a livenessProbe is recommended as it's intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restart the container.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-002-no-livenessprobe.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-11-using-insecure-capability-net-bind-service",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-11-using-insecure-capability-net-bind-service",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-11"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-11-using-insecure-capability-net-bind-service.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-8-using-insecure-capability-mac-override",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-8-using-insecure-capability-mac-override",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-8"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-8-using-insecure-capability-mac-override.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-5-automount-pod-and-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-5-automount-pod-and-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-5"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "enabling automounting at Pod level takes precedence over SA",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-5-automount-pod-and-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-022-3-one-approach-to-hardening-linux-is-enough",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-022-3-one-approach-to-hardening-linux-is-enough",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-022-3"
        },
        "annotations": {
          "check_path": ".metadata.annotations|.metadata.annotations.container.apparmor.security.beta.kubernetes.io|.metadata.annotations[container.apparmor.security.beta.kubernetes.io]|.spec.securityContext.seccompProfile|.spec.securityContext.seLinuxOptions|.spec.containers[].securityContext.seccompProfile|.spec.containers[].securityContext.seLinuxOptions",
          "description": "Not hardening a linux system can increase the impact of a compromise",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-022-3-one-approach-to-hardening-linux-is-enough.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-019-4-use-gid-set-in-container-takes-precedence",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-019-4-use-gid-set-in-container-takes-precedence",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-019-4"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsGroup|.spec.containers[].securityContext.runAsGroup",
          "description": "in case of conflicting settings, the value on the container takes precedence",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-019-4-use-gid-set-in-container-takes-precedence.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-019-3-use-gid-between-1k-10k-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-019-3-use-gid-between-1k-10k-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-019-3"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsGroup|.spec.containers[].securityContext.runAsGroup",
          "description": "An GID above 1000 is enough to avoid running as a system user",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container running with a low group ID",
              "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-019-3-use-gid-between-1k-10k-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-4-use-root-user-in-pod",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-4-use-root-user-in-pod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-4"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Having neither runAsNonRoot nor `runAsUser>1000` means a user has elevated privileges",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-4-use-root-user-in-pod.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-3-using-insecure-capability-chown",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-3-using-insecure-capability-chown",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-3"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-3-using-insecure-capability-chown.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-036-keep-default-capabilities",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-036-keep-default-capabilities",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-036"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities.drop",
          "description": "When not dropping all capabilities the container gets the capabilities defined by the container runtime, which is often fairly generous and does not adhere to principle of least privilege",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-036-keep-default-capabilities.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-1-using-insecure-capability-audit-write",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-1-using-insecure-capability-audit-write",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-1"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-1-using-insecure-capability-audit-write.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-023-no-seccomp-profile-defined",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-023-no-seccomp-profile-defined",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-023"
        },
        "annotations": {
          "check_path": ".metadata.annotations|.metadata.annotations.seccomp.security.alpha.kubernetes.io/pod|.metadata.annotations[seccomp.security.alpha.kubernetes.io/pod]|.spec.securityContext.seccompProfile|.spec.containers[].securityContext.seccompProfile",
          "description": "not providing a seccomp profile allows a process more capabilities than necessary",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-023-no-seccomp-profile-defined.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-043-1-mount-azure-cloud-credentials",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-043-1-mount-azure-cloud-credentials",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-043-1"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "Mounting Docker socket (Unix socket) enables container to access Docker internals, retrieve sensitive information and execute Docker commands.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-043-1-mount-azure-cloud-credentials.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-6-using-insecure-capability-fsetid",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-6-using-insecure-capability-fsetid",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-6"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-6-using-insecure-capability-fsetid.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-15-using-insecure-capability-setgid",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-15-using-insecure-capability-setgid",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-15"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-15-using-insecure-capability-setgid.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-7-no-automount-pod-default-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-7-no-automount-pod-default-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-7"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "disabling automounting at Pod level takes precedence over SA",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-7-no-automount-pod-default-sa.yaml",
      "file_row": 10
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-019-2-use-gid-between-1k-10k-on-pod",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-019-2-use-gid-between-1k-10k-on-pod",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-019-2"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsGroup|.spec.containers[].securityContext.runAsGroup",
          "description": "An GID above 1000 is enough to avoid running as a system user",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container running with a low group ID",
              "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-019-2-use-gid-between-1k-10k-on-pod.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-031-2-allowed-privilege-escalation-explicitly",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-031-2-allowed-privilege-escalation-explicitly",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-031-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.allowPrivilegeEscalation",
          "description": "Avoid using the privileged flag, and if your container does need additional capabilities, add only the ones you need through the capabilities settings. ",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-031-2-allowed-privilege-escalation-explicitly.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-030-no-securitycontext-defined",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-030-no-securitycontext-defined",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-030"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext",
          "description": "Not providing a securityContext leads to the use of too permissive settings for the containers",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-030-no-securitycontext-defined.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/rel-004-2-only-nodeaffinity-is-enough",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "rel-004-2-only-nodeaffinity-is-enough",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "REL-004-2"
        },
        "annotations": {
          "check_path": ".spec.nodeSelector|.spec.affinity.nodeAffinity",
          "description": "Pods with high risk workloads can be assigned to specific node to separate them from other workloads",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/rel-004-2-only-nodeaffinity-is-enough.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-007-1-no-default-cpu-request-for-namespace/res-007-1-no-default-cpu-request-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-007-1-no-default-cpu-request-for-namespace",
        "namespace": "res-007-1-no-default-cpu-request-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-1"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.defaultRequest.cpu|.spec.limits.defaultRequest.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-1-no-default-cpu-request-for-namespace.yaml",
      "file_row": 56
    },
    {
      "object_name": "Deployment/apps/v1/res-007-1-no-default-cpu-request-for-namespace/res-007-1-no-default-cpu-request-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-007-1-no-default-cpu-request-for-namespace",
        "namespace": "res-007-1-no-default-cpu-request-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-1"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.defaultRequest.cpu|.spec.limits.defaultRequest.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-1-no-default-cpu-request-for-namespace.yaml",
      "file_row": 83
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-033-2-root-fs-is-explicitly-writeable",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-033-2-root-fs-is-explicitly-writeable",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-033-2"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.readOnlyRootFilesystem",
          "description": "Using an immutable root filesystem prevents against attackers from compromising the machine through permanent local changes.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The pod has a container with a writable root filesystem",
              "description": "Set securityContext.readOnlyRootFilesystem to true"
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-033-2-root-fs-is-explicitly-writeable.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-17-using-insecure-capability-setuid",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-17-using-insecure-capability-setuid",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-17"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-17-using-insecure-capability-setuid.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-045-containing-cve-2021-25741",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-045-containing-cve-2021-25741",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-045"
        },
        "annotations": {
          "check_path": ".spec.volumes[]|.spec.volumes[].hostPath|.spec.volumes[].hostPath.path|.spec.containers[].volumeMounts[]",
          "description": "A user may be able to create a container with subPath or subPathExpr volume mounts to access files & directories anywhere on the host filesystem. Following Kubernetes versions are affected: v1.22.0-v1.22.1, v1.21.0-v1.21.4, v1.20.0-v1.20.10, <v1.19.14",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-045-containing-cve-2021-25741.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-5-use-runasnonroot-flag-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-5-use-runasnonroot-flag-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-5"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Using runAsNonRoot is a viable alternative to `runAsUser>1000`",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "app",
              "summary": "The container is running with a low user ID",
              "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000"
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-5-use-runasnonroot-flag-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-014-no-apparmor-profile",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-014-no-apparmor-profile",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-014"
        },
        "annotations": {
          "check_path": ".metadata.annotations|.metadata.annotations.container.apparmor.security.beta.kubernetes.io.metadata.annotations[container.apparmor.security.beta.kubernetes.io]",
          "description": "AppArmor can be configured for any application to reduce its potential attack surface and provide greater in-depth defense.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-014-no-apparmor-profile.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-14-using-insecure-capability-setfcap",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-14-using-insecure-capability-setfcap",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-14"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-14-using-insecure-capability-setfcap.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/np-005-network-policy-refers-no-valid-workload/np-005-network-policy-refers-no-valid-workload",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "np-005-network-policy-refers-no-valid-workload",
        "namespace": "np-005-network-policy-refers-no-valid-workload",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-005"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.podSelector|.spec.podSelector",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The NetworkPolicys selector doesn't match any pods",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-005-network-policy-refers-no-valid-workload.yaml",
      "file_row": 57
    },
    {
      "object_name": "Deployment/apps/v1/np-005-network-policy-refers-no-valid-workload/np-005-network-policy-refers-no-valid-workload",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "np-005-network-policy-refers-no-valid-workload",
        "namespace": "np-005-network-policy-refers-no-valid-workload",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "NP-005"
        },
        "annotations": {
          "check_path": "NetworkPolicy.spec.podSelector|.spec.podSelector",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/np-005-network-policy-refers-no-valid-workload.yaml",
      "file_row": 86
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-12-using-insecure-capability-net-raw",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-12-using-insecure-capability-net-raw",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-12"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-12-using-insecure-capability-net-raw.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-5-usage-of-usr-bin-scsh-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-5-usage-of-usr-bin-scsh-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-5"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-5-usage-of-usr-bin-scsh-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-024-8-usage-of-usr-bin-busybox-in-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-024-8-usage-of-usr-bin-busybox-in-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-024-8"
        },
        "annotations": {
          "check_path": ".spec.containers[].command",
          "description": "Attackers who can run a cmd/bash script inside a container can use it to execute malicious code",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-024-8-usage-of-usr-bin-busybox-in-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-035-16-using-insecure-capability-setpcap",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-035-16-using-insecure-capability-setpcap",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-035-16"
        },
        "annotations": {
          "check_path": ".spec.containers[].securityContext.capabilities",
          "description": "Insecure capabilities can increase the impact of a container compromise",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-035-16-using-insecure-capability-setpcap.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-017-6-runasnonroot-is-optional-on-container",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-017-6-runasnonroot-is-optional-on-container",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-017-6"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsNonRoot|.spec.securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser",
          "description": "Using runAsNonRoot is a viable alternative to `runAsUser>1000`",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-017-6-runasnonroot-is-optional-on-container.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-002-1-explicit-default-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-002-1-explicit-default-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-002-1"
        },
        "annotations": {
          "check_path": ".spec.serviceAccountName",
          "description": "`default` ServiceAccount should never be used. Create a dedicated ServiceAccount when access to API server is needed when access to API server is needed.",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-002-1-explicit-default-sa.yaml",
      "file_row": 1
    }
  ],
  [
    {
      "object_name": "NetworkPolicy/networking.k8s.io/v1/res-007-3-no-cpu-limits-for-namespace/res-007-3-no-cpu-limits-for-namespace",
      "type_meta": {
        "kind": "NetworkPolicy",
        "apiVersion": "networking.k8s.io/v1"
      },
      "object_meta": {
        "name": "res-007-3-no-cpu-limits-for-namespace",
        "namespace": "res-007-3-no-cpu-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-3"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.min.cpu|LimitRange.spec.limits.max.cpu|.spec.limits.min.cpu|.spec.limits.max.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "NetworkPolicy targets Pod",
            "id": "networkpolicy-targets-pod",
            "target_type": "NetworkPolicy",
            "comment": "Makes sure that all NetworkPolicies targets at least one Pod",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-3-no-cpu-limits-for-namespace.yaml",
      "file_row": 55
    },
    {
      "object_name": "Deployment/apps/v1/res-007-3-no-cpu-limits-for-namespace/res-007-3-no-cpu-limits-for-namespace",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "res-007-3-no-cpu-limits-for-namespace",
        "namespace": "res-007-3-no-cpu-limits-for-namespace",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "RES-007-3"
        },
        "annotations": {
          "check_path": "LimitRange.spec.limits.min.cpu|LimitRange.spec.limits.max.cpu|.spec.limits.min.cpu|.spec.limits.max.cpu",
          "expected": "alert"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/res-007-3-no-cpu-limits-for-namespace.yaml",
      "file_row": 82
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-022-2-one-approach-to-hardening-linux-is-enough",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-022-2-one-approach-to-hardening-linux-is-enough",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-022-2"
        },
        "annotations": {
          "check_path": ".metadata.annotations|.metadata.annotations.container.apparmor.security.beta.kubernetes.io|.metadata.annotations[container.apparmor.security.beta.kubernetes.io]|.spec.securityContext.seccompProfile|.spec.securityContext.seLinuxOptions|.spec.containers[].securityContext.seccompProfile|.spec.containers[].securityContext.seLinuxOptions",
          "description": "Not hardening a linux system can increase the impact of a compromise",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-022-2-one-approach-to-hardening-linux-is-enough.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-003-8-no-automount-pod-automount-sa",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-003-8-no-automount-pod-automount-sa",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-003-8"
        },
        "annotations": {
          "check_path": ".spec.automountServiceAccountToken|.automountServiceAccountToken",
          "description": "disabling automounting at Pod level takes precedence over SA",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-003-8-no-automount-pod-automount-sa.yaml",
      "file_row": 11
    }
  ],
  [
    {
      "object_name": "Deployment/apps/v1/kalm-benchmark/pod-018-4-use-uid-set-in-container-takes-precedence",
      "type_meta": { "kind": "Deployment", "apiVersion": "apps/v1" },
      "object_meta": {
        "name": "pod-018-4-use-uid-set-in-container-takes-precedence",
        "namespace": "kalm-benchmark",
        "creationTimestamp": null,
        "labels": {
          "app.kubernetes.io/part-of": "kalm-benchmark",
          "check": "POD-018-4"
        },
        "annotations": {
          "check_path": ".spec.securityContext.runAsUser|.spec.securityContext.runAsNonRoot|.spec.containers[].securityContext.runAsUser|.spec.containers[].securityContext.runAsNonRoot",
          "description": "in case of conflicting settings, the value on the container takes precedence",
          "expected": "pass"
        }
      },
      "checks": [
        {
          "check": {
            "name": "Stable version",
            "id": "stable-version",
            "target_type": "all",
            "comment": "Checks if the object is using a deprecated apiVersion",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Label values",
            "id": "label-values",
            "target_type": "all",
            "comment": "Validates label values",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod Probes",
            "id": "pod-probes",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods have safe probe configurations",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod is not targeted by a service, skipping probe checks.",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Container Security Context User Group ID",
            "id": "container-security-context-user-group-id",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context ReadOnlyRootFilesystem",
            "id": "container-security-context-readonlyrootfilesystem",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a security context with read only filesystem set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Pull Policy",
            "id": "container-image-pull-policy",
            "target_type": "Pod",
            "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Pod NetworkPolicy",
            "id": "pod-networkpolicy",
            "target_type": "Pod",
            "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "optional": false
          },
          "grade": 1,
          "skipped": false,
          "comments": [
            {
              "path": "",
              "summary": "The pod does not have a matching NetworkPolicy",
              "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
            }
          ]
        },
        {
          "check": {
            "name": "Container Ephemeral Storage Request and Limit",
            "id": "container-ephemeral-storage-request-and-limit",
            "target_type": "Pod",
            "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Security Context Privileged",
            "id": "container-security-context-privileged",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have a unprivileged security context set",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Resources",
            "id": "container-resources",
            "target_type": "Pod",
            "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Container Image Tag",
            "id": "container-image-tag",
            "target_type": "Pod",
            "comment": "Makes sure that a explicit non-latest tag is used",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        },
        {
          "check": {
            "name": "Deployment has PodDisruptionBudget",
            "id": "deployment-has-poddisruptionbudget",
            "target_type": "Deployment",
            "comment": "Makes sure that all Deployments are targeted by a PDB",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment has host PodAntiAffinity",
            "id": "deployment-has-host-podantiaffinity",
            "target_type": "Deployment",
            "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "optional": false
          },
          "grade": 0,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment has less than 2 replicas",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment targeted by HPA does not have replicas configured",
            "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
            "target_type": "Deployment",
            "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
            "optional": false
          },
          "grade": 10,
          "skipped": true,
          "comments": [
            {
              "path": "",
              "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
              "description": ""
            }
          ]
        },
        {
          "check": {
            "name": "Deployment Pod Selector labels match template metadata labels",
            "id": "deployment-pod-selector-labels-match-template-metadata-labels",
            "target_type": "Deployment",
            "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
            "optional": false
          },
          "grade": 10,
          "skipped": false,
          "comments": null
        }
      ],
      "file_name": "/home/me/Dev/kalm-benchmark/dist/pod-018-4-use-uid-set-in-container-takes-precedence.yaml",
      "file_row": 11
    }
  ]
]
